import React, { useState, useEffect } from "react";
import styled from "styled-components";
import { ethers } from "ethers";
import Web3Modal from "web3modal";
import WalletConnectProvider from "@walletconnect/web3-provider";
import Chip from "@mui/material/Chip";
import Web3 from 'web3';
import showMessage from "./showMessage";
import { set, get, subscribe } from "../store";
import { formatAddress, padWidth } from "../utils";
import HuaJiaContractABI from "../abi/huajia.json";

// const CHAIN_ID = process.env.NEXT_PUBLIC_CHAIN_ID;
// const NETWORK = CHAIN_ID === "1" ? "mainnet" : "rinkeby";
const contractABI = HuaJiaContractABI;


let contract;
let web3;

export async function connectWallet() {
	let add = "";
	if (typeof window.ethereum === "undefined") {
		//没安装MetaMask钱包进行弹框提示
		showMessage({
		  type: "error",
		  title: "你还没装小狐狸呢！",
		  body: err.message,
		});
		window.open("https://metamask.io/");
	} else {
		//如果用户安装了MetaMask，你可以要求他们授权应用登录并获取其账号
		await window.ethereum.enable()
			.catch(function(reason) {
				//如果用户拒绝了登录请求
				if (reason === "User rejected provider access") {
					// 用户拒绝登录后执行语句；
					showMessage({
					  type: "error",
					  title: "你拒绝授权应用登陆",
					  body: err.message,
					});
				} else {
					// 本不该执行到这里，但是真到这里了，说明发生了意外
					showMessage({
					  type: "error",
					  title: "可能发生了什么意外！",
					  body: err.message,
					});
				}
			}).then(function(accounts) {
				add = accounts[0]
			});
		}
		
		console.log(add)
		return add
}

async function disconnectWallet() {
}

const NoCollectWallet = styled.div`
  position: absolute;
  font-size: 12px;
  margin-top: 1px;
  color: #666;
  text-align: right;
  @media only screen and (max-width: ${padWidth}) {
    width: 100%;
    margin-top: 10px;
    text-align: center;
  }
`;

function ConnectWallet(props) {
  const [address, setAddress] = useState(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const addressInStore = get("address") || null;
    if (addressInStore) {
      setAddress(addressInStore);
    }
    subscribe("address", () => {
      const addressInStore = get("address") || null;
      setAddress(addressInStore);
    });
  }, []);

  if (address && !loading) {
    return (
      <Chip
        label={address}
        color="primary"
        onDelete={async () => {
          // await disconnectWallet();
          setAddress(null);
          set("address", "");
          set("fullAddress", "");
        }}
      />
    );
  }

  return (
    <div style={{ position: "relative" }}>
      <Chip
        style={{ fontSize: 16 }} 
        label={loading ? "连接中..." : "连接钱包"}
        color="primary"
        onClick={async () => {
          setLoading(true);
          try {
            const address = await connectWallet();
			console.log(address)
            setAddress(formatAddress(address));
            set("address", formatAddress(address));
            set("fullAddress", address);
          } catch (err) {
            await disconnectWallet();
            set("address", "");
            set("fullAddress", "");
            setAddress(null);
            showMessage({
              type: "error",
              title: "链接钱包失败，请重试",
              body: err.message,
            });
          }
          setLoading(false);
        }}
      />
      {props.showCollect && (
        <NoCollectWallet>
          我们不用
          <br />
          <span style={{ textDecoration: "line-through" }}>Collect Wallet</span>
        </NoCollectWallet>
      )}
    </div>
  );
}

export default ConnectWallet;
